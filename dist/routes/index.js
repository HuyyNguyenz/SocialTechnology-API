"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = __importDefault(require("~/controllers/userController"));
const verifyToken_1 = __importDefault(require("~/middlewares/verifyToken"));
const verifyEmail_1 = __importDefault(require("~/middlewares/verifyEmail"));
const verifyOtp_1 = __importDefault(require("~/middlewares/verifyOtp"));
const verifyUser_1 = __importDefault(require("~/middlewares/verifyUser"));
const router = express_1.default.Router();
const initialRoutes = (app) => {
    router.put('/verifyUser/:username', userController_1.default.verifyUser);
    router.post('/register', userController_1.default.registerUser);
    router.post('/login', verifyUser_1.default, userController_1.default.loginUser);
    router.post('/refresh', userController_1.default.requestRefreshToken);
    router.post('/verifyEmail', verifyEmail_1.default, userController_1.default.sendOtpFromMail);
    router.post('/verifyOtp', verifyOtp_1.default, userController_1.default.permitRecoveryPassword);
    router.put('/recovery/:email', userController_1.default.recoveryPassword);
    router.post('/search', verifyToken_1.default, userController_1.default.searchUser);
    router.get('/user', verifyToken_1.default, userController_1.default.getUser);
    router.get('/user/:id', verifyToken_1.default, userController_1.default.getUser);
    router.get('/users', verifyToken_1.default, userController_1.default.getAllUser);
    router.put('/user/:id', verifyToken_1.default, userController_1.default.updateUserProfile);
    router.put('/user/:id/:state', verifyToken_1.default, userController_1.default.updateUserState);
    router.get('/posts/:limit/:offset', verifyToken_1.default, userController_1.default.getPostList);
    router.get('/postsUser/:userId/:limit/:offset', verifyToken_1.default, userController_1.default.getPostListByUser);
    router.get('/post/:id', verifyToken_1.default, userController_1.default.getPostDetail);
    router.get('/likes/post/:postId', verifyToken_1.default, userController_1.default.getLikesPost);
    router.get('/shares/post/:postId', verifyToken_1.default, userController_1.default.getSharesPost);
    router.get('/likes', verifyToken_1.default, userController_1.default.getLikes);
    router.post('/post', verifyToken_1.default, userController_1.default.addPost);
    router.post('/share/post', verifyToken_1.default, userController_1.default.sharePost);
    router.post('/like/post', verifyToken_1.default, userController_1.default.likePost);
    router.delete('/post/:id', verifyToken_1.default, userController_1.default.deletePost);
    router.delete('/unlike/post/:id', verifyToken_1.default, userController_1.default.deleteLikePost);
    router.put('/post/:id', verifyToken_1.default, userController_1.default.updatePost);
    router.get('/comments', verifyToken_1.default, userController_1.default.getCommentList);
    router.get('/commentsPost/:postId/:limit/:offset', verifyToken_1.default, userController_1.default.getCommentListByPost);
    router.post('/comment', verifyToken_1.default, userController_1.default.addComment);
    router.delete('/comment/:id', verifyToken_1.default, userController_1.default.deleteComment);
    router.put('/comment/:id', verifyToken_1.default, userController_1.default.updateComment);
    router.get('/friends', verifyToken_1.default, userController_1.default.getFriendList);
    router.post('/friend', verifyToken_1.default, userController_1.default.requestMakeFriend);
    router.delete('/friend/:id', verifyToken_1.default, userController_1.default.deleteFriend);
    router.put('/friend/:id', verifyToken_1.default, userController_1.default.acceptFriend);
    router.get('/notifies', verifyToken_1.default, userController_1.default.getNotifyList);
    router.put('/notify/:id', verifyToken_1.default, userController_1.default.updateNotify);
    router.get('/messages', verifyToken_1.default, userController_1.default.getMessageList);
    router.post('/message', verifyToken_1.default, userController_1.default.addMessage);
    router.delete('/message/:id', verifyToken_1.default, userController_1.default.deleteMessage);
    router.put('/message/:id', verifyToken_1.default, userController_1.default.updateMessage);
    router.get('/article', verifyToken_1.default, userController_1.default.getArticle);
    return app.use('/api/', router);
};
exports.default = initialRoutes;
